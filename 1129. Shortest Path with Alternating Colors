https://leetcode.com/problems/shortest-path-with-alternating-colors/

class Solution {
public:
	vector<int> shortestAlternatingPaths(int n, vector<vector<int>>& red_edges, vector<vector<int>>& blue_edges) {
		vector<vector<pair<int, int>>> graph(n);

		for (auto e : red_edges) 
		{
			graph[e[0]].push_back({ e[1], 0 });
		}
		for (auto e : blue_edges)
		{
			graph[e[0]].push_back({ e[1], 1 });
		}

		vector<vector<bool>> checked(n, vector(2, false));
		queue<pair<int, int>> queue;
		vector<int> result(n, -1);

		queue.push({ 0, -1 });
		int len = 0;
		while (!queue.empty()) {
			int s = queue.size();
			for (int i = 0; i < s; ++i) {
				pair<int, int> cur = queue.front();
				queue.pop();

				if (result[cur.first] == -1) {
					result[cur.first] = len;
				}

				for (auto node : graph[cur.first]) {
					if (node.second != cur.second && !checked[node.first][node.second]) {
						checked[node.first][node.second] = true;
						queue.push(node);
					}
				}
			}
			len++;
		}
		return result;
	}
};
