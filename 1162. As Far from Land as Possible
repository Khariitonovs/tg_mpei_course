https://leetcode.com/problems/as-far-from-land-as-possible/

class Solution {
	struct coord
	{
		int x;
		int y;
	};
public:
	int maxDistance(vector<vector<int>>& grid) {
		queue<coord> queue;
		int n = grid.size();

		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				if (grid[i][j] == 1) {
					queue.push({ i, j });
				}
			}
		}
		if (queue.size() == 0 || queue.size() == n * n)
		{
			return -1;
		}
		int maxVal = 0;
		while (!queue.empty()) {
			const int row = queue.front().x;
			const int col = queue.front().y;
			queue.pop();

			const int value = grid[row][col];

			for (auto p : vector<coord>{ {0, -1}, { -1, 0 }, { 1, 0 }, { 0, 1 } })
			{
				const int newRow = row + p.x;
				const int newCol = col + p.y;
				if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < n && grid[newRow][newCol] == 0) {
					queue.push({ newRow, newCol });
					grid[newRow][newCol] = value + 1;
					maxVal = max(maxVal, grid[newRow][newCol]);
				}
				
			}
		}
		return maxVal - 1;
	}
};
